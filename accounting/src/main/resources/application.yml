server:
  port: 8090
  address: accounting-app

spring:
  datasource:
    url: jdbc:mysql://${ACCOUNTING_DB_HOST}:${ACCOUNTING_DB_PORT}/${ACCOUNTING_DB_NAME}
    username: ${ACCOUNTING_DB_USER}
    password: ${ACCOUNTING_DB_PASSWORD}
    platform: mysql
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    database: mysql
    show-sql: false
  security:
    oauth2:
      client:
        registration:
          accounting-client-authorization-code:
            provider: spring
            client-id: accounting-client
            client-secret: secret
            authorization-grant-type: authorization_code
            #            redirect-uri: "{baseUrl}/authorized"
            scope: read,write
        provider:
          spring:
            issuer-uri: http://auth-server:9000
            user-info-uri: http://auth-server:9000/auth/user-info
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: accounting
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    com.ogarose.popugjira.accounting: DEBUG